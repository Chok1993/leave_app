# ====================================================
# üìã ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ (‡∏™‡∏Ñ‡∏£.9)
# ‚úÖ Final Full Version: ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏°‡∏ô‡∏π + ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡πà‡∏≤‡∏ô Excel ‡∏ó‡∏ô‡∏ó‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
# ====================================================

import io
import altair as alt
import datetime as dt
import pandas as pd
import numpy as np
import streamlit as st
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload, MediaIoBaseUpload

# ====================================================
# üîê Auth & App Config
# ====================================================
st.set_page_config(page_title="‡∏™‡∏Ñ‡∏£.9 - ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏≤/‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£/‡∏™‡πÅ‡∏Å‡∏ô", layout="wide")

creds = service_account.Credentials.from_service_account_info(
    st.secrets["gcp_service_account"],
    scopes=["https://www.googleapis.com/auth/drive"]
)
service = build("drive", "v3", credentials=creds)
ADMIN_PASSWORD = st.secrets.get("admin_password", "admin123")

# ====================================================
# üóÇÔ∏è Shared Drive Config
# ====================================================
FOLDER_ID = "1YFJZvs59ahRHmlRrKcQwepWJz6A-4B7d"
ATTACHMENT_FOLDER_NAME = "‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö_‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£"
FILE_ATTEND = "attendance_report.xlsx"
FILE_LEAVE  = "leave_report.xlsx"
FILE_TRAVEL = "travel_report.xlsx"

# ====================================================
# üîß Drive Helper Functions
# ====================================================
def get_file_id(filename: str, parent_id=FOLDER_ID):
    q = f"name='{filename}' and '{parent_id}' in parents and trashed=false"
    res = service.files().list(
        q=q, fields="files(id,name)", supportsAllDrives=True, includeItemsFromAllDrives=True
    ).execute()
    files = res.get("files", [])
    return files[0]["id"] if files else None


@st.cache_data(ttl=600)
def read_excel_from_drive(filename: str) -> pd.DataFrame:
    """‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡∏à‡∏≤‡∏Å Shared Drive; ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ DataFrame ‡∏ß‡πà‡∏≤‡∏á"""
    try:
        file_id = get_file_id(filename)
        if not file_id:
            st.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå '{filename}' ‡πÉ‡∏ô Google Drive ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            return pd.DataFrame()

        req = service.files().get_media(fileId=file_id, supportsAllDrives=True)
        fh = io.BytesIO()
        downloader = MediaIoBaseDownload(fh, req)
        done = False
        while not done:
            _, done = downloader.next_chunk()
        fh.seek(0)

        xls = pd.ExcelFile(fh, engine="openpyxl")
        if not xls.sheet_names:
            st.error(f"‚ùå ‡πÑ‡∏ü‡∏•‡πå '{filename}' ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏µ‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            return pd.DataFrame()

        df = pd.read_excel(xls, sheet_name=xls.sheet_names[0])
        expected_cols = ["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", "‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"]
        if not any(col in df.columns for col in expected_cols):
            fh.seek(0)
            df = pd.read_excel(xls, sheet_name=xls.sheet_names[0], header=1)

        return df
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå {filename}: {e}")
        return pd.DataFrame()


def write_excel_to_drive(filename: str, df: pd.DataFrame):
    """‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î DataFrame ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Drive"""
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
        df.to_excel(writer, index=False)
    output.seek(0)
    media = MediaIoBaseUpload(output, mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
    file_id = get_file_id(filename)
    if file_id:
        service.files().update(fileId=file_id, media_body=media, supportsAllDrives=True).execute()
    else:
        service.files().create(
            body={"name": filename, "parents": [FOLDER_ID]},
            media_body=media, supportsAllDrives=True
        ).execute()


def count_weekdays(start_date, end_date):
    if start_date and end_date and start_date <= end_date:
        return np.busday_count(start_date, end_date + dt.timedelta(days=1))
    return 0

# ====================================================
# üì• Load Data
# ====================================================
df_att = read_excel_from_drive(FILE_ATTEND)
df_leave = read_excel_from_drive(FILE_LEAVE)
df_travel = read_excel_from_drive(FILE_TRAVEL)

# ====================================================
# üéØ UI Header
# ====================================================
st.markdown("##### **‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà 9 ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤**")
st.title("üìã ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏≤ ‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô (‡∏™‡∏Ñ‡∏£.9)")

# ====================================================
# üß≠ Sidebar Menu
# ====================================================
menu = st.sidebar.radio(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π",
    ["‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", "üìä Dashboard", "üìÖ ‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô", "üß≠ ‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£", "üïí ‡∏Å‡∏≤‡∏£‡∏•‡∏≤", "üßë‚Äçüíº ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö"]
)

# ====================================================
# üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
# ====================================================
if menu == "‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å":
    st.info(
        """
        üí° ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏Ç‡∏≠‡∏á **‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà 9 ‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤**
        - ‡∏Å‡∏≤‡∏£‡∏•‡∏≤  
        - ‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£  
        - ‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô  
        - ‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ PDF ‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        """
    )
    st.image(
        "https://ddc.moph.go.th/uploads/files/11120210817094038.jpg",
        caption="‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà 9 ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤",
        use_container_width=True
    )

# ====================================================
# üìä Dashboard
# ====================================================
elif menu == "üìä Dashboard":
    st.header("üìä Dashboard ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°")

    col1, col2, col3 = st.columns(3)
    col1.metric("üìÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÅ‡∏Å‡∏ô (‡πÅ‡∏ñ‡∏ß)", len(df_att))
    col2.metric("üïí ‡∏Å‡∏≤‡∏£‡∏•‡∏≤ (‡∏Ñ‡∏£‡∏±‡πâ‡∏á)", len(df_leave))
    col3.metric("üß≠ ‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ (‡∏Ñ‡∏£‡∏±‡πâ‡∏á)", len(df_travel))
    st.markdown("---")

    # ‡∏Å‡∏£‡∏≤‡∏ü‡∏•‡∏≤
    if not df_leave.empty and "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô" in df_leave.columns and "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏•‡∏≤" in df_leave.columns:
        leave_by_group = (
            df_leave.groupby("‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô")["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏•‡∏≤"]
            .sum().sort_values(ascending=False).reset_index()
        )
        chart = alt.Chart(leave_by_group).mark_bar().encode(
            x=alt.X("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏•‡∏≤:Q", title="‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡∏•‡∏≤"),
            y=alt.Y("‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô:N", sort="-x", title="‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô"),
            tooltip=["‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏•‡∏≤"]
        ).properties(height=300)
        st.altair_chart(chart, use_container_width=True)
    else:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏≤‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•")

# ====================================================
# üìÖ ‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô (Core Feature)
# ====================================================
elif menu == "üìÖ ‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô":
    st.header("üìÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏≤‡∏Å‡∏™‡πÅ‡∏Å‡∏ô + ‡∏•‡∏≤ + ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£)")

    if df_att.empty:
        st.warning("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
        st.stop()

    rename_map = {"‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•": "‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", "‡∏ä‡∏∑‡πà‡∏≠": "‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"}
    for df in [df_att, df_leave, df_travel]:
        df.rename(columns=rename_map, inplace=True)

    df_att["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = pd.to_datetime(df_att["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"], errors="coerce")
    for df in [df_leave, df_travel]:
        for c in ["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î"]:
            if c in df.columns:
                df[c] = pd.to_datetime(df[c], errors="coerce")

    df_att["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"] = df_att["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].dt.strftime("%Y-%m")
    months = sorted(df_att["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"].dropna().unique())
    selected_month = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", months, index=len(months)-1)
    all_names = sorted(df_att["‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"].dropna().unique())
    selected_names = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£", all_names, default=all_names[:3])

    df_month = df_att[df_att["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"] == selected_month]
    if selected_names:
        df_month = df_month[df_month["‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"].isin(selected_names)]

    if df_month.empty:
        st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ")
        st.stop()

    WORK_START = dt.time(8, 30)
    WORK_END = dt.time(16, 30)

    y, m = map(int, selected_month.split("-"))
    month_start = dt.date(y, m, 1)
    month_end = (month_start + pd.offsets.MonthEnd(0)).date()
    date_range = pd.date_range(month_start, month_end, freq="D")

    records = []
    for name in df_month["‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"].unique():
        for d in date_range:
            rec = {"‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô": name, "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": d.date(), "‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤": "", "‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å": "", "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏": "", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": ""}
            att = df_month[(df_month["‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"] == name) & (df_month["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].dt.date == d.date())]

            if not att.empty:
                rec["‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤"] = att.iloc[0].get("‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤", "")
                rec["‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å"] = att.iloc[0].get("‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å", "")
                rec["‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"] = att.iloc[0].get("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", "")

                if d.weekday() >= 5:
                    rec["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î"
                else:
                    try:
                        t_in = pd.to_datetime(str(rec["‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤"]), format="%H:%M").time() if rec["‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤"] else None
                        t_out = pd.to_datetime(str(rec["‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å"]), format="%H:%M").time() if rec["‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å"] else None
                    except:
                        t_in, t_out = None, None

                    if not t_in and not t_out:
                        rec["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "‡∏Ç‡∏≤‡∏î‡∏á‡∏≤‡∏ô"
                    elif t_in and not t_out:
                        rec["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô"
                    elif not t_in and t_out:
                        rec["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "‡∏Ç‡∏≤‡∏î‡∏á‡∏≤‡∏ô"
                    else:
                        if t_in > WORK_START and t_out < WORK_END:
                            rec["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "‡∏°‡∏≤‡∏™‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô"
                        elif t_in > WORK_START:
                            rec["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "‡∏°‡∏≤‡∏™‡∏≤‡∏¢"
                        elif t_out < WORK_END:
                            rec["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô"
                        else:
                            rec["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "‡∏°‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥"
            else:
                in_leave = (
                    not df_leave.empty and
                    (df_leave["‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"] == name).any() and
                    (df_leave[
                        (df_leave["‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"] == name) &
                        (df_leave["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°"] <= d) &
                        (df_leave["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î"] >= d)
                    ].shape[0] > 0)
                )
                in_travel = (
                    not df_travel.empty and
                    (df_travel["‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"] == name).any() and
                    (df_travel[
                        (df_travel["‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"] == name) &
                        (df_travel["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°"] <= d) &
                        (df_travel["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î"] >= d)
                    ].shape[0] > 0)
                )

                if in_leave:
                    leave_type = df_leave.loc[
                        (df_leave["‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"] == name) &
                        (df_leave["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°"] <= d) &
                        (df_leave["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î"] >= d),
                        "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤"
                    ].iloc[0]
                    rec["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = f"‡∏•‡∏≤ ({leave_type})"
                elif in_travel:
                    rec["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£"
                elif d.weekday() >= 5:
                    rec["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î"
                else:
                    rec["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "‡∏Ç‡∏≤‡∏î‡∏á‡∏≤‡∏ô"
            records.append(rec)

    df_daily = pd.DataFrame(records)

    def color_status(val):
        colors = {
            "‡∏°‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥": "background-color:#d4edda",
            "‡∏°‡∏≤‡∏™‡∏≤‡∏¢": "background-color:#ffeeba",
            "‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô": "background-color:#f8d7da",
            "‡∏°‡∏≤‡∏™‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô": "background-color:#fcd5b5",
            "‡∏•‡∏≤": "background-color:#d1ecf1",
            "‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£": "background-color:#fff3cd",
            "‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î": "background-color:#e2e3e5",
            "‡∏Ç‡∏≤‡∏î‡∏á‡∏≤‡∏ô": "background-color:#f5c6cb",
        }
        for key in colors:
            if key in str(val):
                return colors[key]
        return ""

    st.markdown("### üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
    st.dataframe(df_daily.style.applymap(color_status, subset=["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"]), use_container_width=True, height=600)

# ====================================================
# üß≠ ‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£
# ====================================================
elif menu == "üß≠ ‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£":
    st.header("üß≠ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£")
    st.info("‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á PDF ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ Drive ‡πÑ‡∏î‡πâ (‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏£‡∏∏‡πà‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ)")

# ====================================================
# üïí ‡∏Å‡∏≤‡∏£‡∏•‡∏≤
# ====================================================
elif menu == "üïí ‡∏Å‡∏≤‡∏£‡∏•‡∏≤":
    st.header("üïí ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤")
    st.info("‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")

# ====================================================
# üßë‚Äçüíº ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö
# ====================================================
elif menu == "üßë‚Äçüíº ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö":
    st.header("üßë‚Äçüíº ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö")
    st.info("‡πÉ‡∏ô‡∏£‡∏∏‡πà‡∏ô‡∏ô‡∏µ‡πâ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô Shared Drive ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á")
