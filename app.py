# ====================================================
# üìã ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ (‡∏™‡∏Ñ‡∏£.9)
# ‚úÖ Final Version: ‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå, ‡∏ô‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£, UI/UX, Admin Tools
# ====================================================

import io
import mimetypes
import altair as alt
import datetime as dt
import pandas as pd
import numpy as np
import streamlit as st

from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseUpload, MediaFileUpload

# ===========================
# üîê Auth & App Config
# ===========================
st.set_page_config(page_title="‡∏™‡∏Ñ‡∏£.9 - ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏≤/‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£/‡∏™‡πÅ‡∏Å‡∏ô", layout="wide")

creds = service_account.Credentials.from_service_account_info(
    st.secrets["gcp_service_account"],
    scopes=["https://www.googleapis.com/auth/drive"]
)
ADMIN_PASSWORD = st.secrets.get("admin_password", "admin123")

# ===========================
# üóÇÔ∏è Shared Drive Config
# ===========================
FOLDER_ID = "1YFJZvs59ahRHmlRrKcQwepWJz6A-4B7d"
ATTACHMENT_FOLDER_NAME = "‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö_‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£"
FILE_ATTEND = "attendance_report.xlsx"
FILE_LEAVE  = "leave_report.xlsx"
FILE_TRAVEL = "travel_report.xlsx"

service = build("drive", "v3", credentials=creds)

# ===========================
# üîß Drive Helpers
# ===========================
@st.cache_data(ttl=600)
def read_excel_from_drive(filename: str) -> pd.DataFrame:
    """‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡∏à‡∏≤‡∏Å Shared Drive; ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå ‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ DataFrame ‡∏ß‡πà‡∏≤‡∏á"""
    try:
        file_id = get_file_id(filename)
        if not file_id: return pd.DataFrame()
        req = service.files().get_media(fileId=file_id, supportsAllDrives=True)
        fh = io.BytesIO()
        downloader = MediaIoBaseDownload(fh, req)
        done = False
        while not done: _, done = downloader.next_chunk()
        fh.seek(0)
        return pd.read_excel(fh, engine="openpyxl")
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå {filename}: {e}")
        return pd.DataFrame()

def get_file_id(filename: str, parent_id=FOLDER_ID):
    """‡∏´‡∏≤ ID ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô Parent ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
    q = f"name='{filename}' and '{parent_id}' in parents and trashed=false"
    res = service.files().list(q=q, fields="files(id,name)", supportsAllDrives=True, includeItemsFromAllDrives=True).execute()
    files = res.get("files", [])
    return files[0]["id"] if files else None

def write_excel_to_drive(filename: str, df: pd.DataFrame):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å DataFrame ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ö‡∏ô Shared Drive"""
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
        df.to_excel(writer, index=False)
    output.seek(0)
    media = MediaIoBaseUpload(output, mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
    file_id = get_file_id(filename)
    if file_id:
        service.files().update(fileId=file_id, media_body=media, supportsAllDrives=True).execute()
    else:
        service.files().create(body={"name": filename, "parents": [FOLDER_ID]}, media_body=media, fields="id", supportsAllDrives=True).execute()

def backup_excel(original_filename: str, df: pd.DataFrame):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤"""
    if df.empty: return
    now = dt.datetime.now().strftime("%Y-%m-%d_%H%M%S")
    backup_filename = f"backup_{now}_{original_filename}"
    write_excel_to_drive(backup_filename, df)

@st.cache_resource
def get_or_create_folder(folder_name, parent_folder_id):
    """‡∏´‡∏≤ ID ‡∏Ç‡∏≠‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà"""
    folder_id = get_file_id(folder_name, parent_id=parent_folder_id)
    if folder_id:
        return folder_id
    else:
        file_metadata = {
            'name': folder_name,
            'mimeType': 'application/vnd.google-apps.folder',
            'parents': [parent_folder_id]
        }
        folder = service.files().create(body=file_metadata, fields='id', supportsAllDrives=True).execute()
        return folder.get('id')

def upload_pdf_to_drive(file_object, filename, folder_id):
    """‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô View Link"""
    if file_object is None:
        return "-"
    
    file_object.seek(0)
    media = MediaIoBaseUpload(file_object, mimetype='application/pdf', resumable=True)
    file_metadata = {'name': filename, 'parents': [folder_id]}
    
    file = service.files().create(
        body=file_metadata,
        media_body=media,
        fields='id, webViewLink',
        supportsAllDrives=True
    ).execute()
    
    permission = {'type': 'anyone', 'role': 'reader'}
    service.permissions().create(fileId=file.get('id'), body=permission, supportsAllDrives=True).execute()
    
    return file.get('webViewLink')

def count_weekdays(start_date, end_date):
    """‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ (‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå) ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡∏ß‡∏±‡∏ô ‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î"""
    if start_date and end_date and start_date <= end_date:
        return np.busday_count(start_date, end_date + dt.timedelta(days=1))
    return 0

# ===========================
# üì• Load & Normalize Data
# ===========================
def to_date(s):
    if pd.isna(s): return pd.NaT
    try: return pd.to_datetime(s).date()
    except (ValueError, TypeError): return pd.NaT

df_att = read_excel_from_drive(FILE_ATTEND)
df_leave = read_excel_from_drive(FILE_LEAVE)
df_travel = read_excel_from_drive(FILE_TRAVEL)

# ====================================================
# üéØ UI Constants & Main App
# ====================================================
st.markdown("##### **‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà 9 ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤**")
st.title("üìã ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏≤ ‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô")

if 'submitted' not in st.session_state:
    st.session_state.submitted = False

def callback_submit():
    st.session_state.submitted = True

all_names = sorted(list(set(pd.concat([
    df_leave['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'] if '‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•' in df_leave.columns else pd.Series(dtype='str'),
    df_travel['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'] if '‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•' in df_travel.columns else pd.Series(dtype='str'),
    df_att['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'] if '‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•' in df_att.columns else pd.Series(dtype='str')
]).dropna())))

staff_groups = sorted([
    "‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠", "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏≤‡∏î‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡πÇ‡∏ï‡πâ‡∏†‡∏≤‡∏ß‡∏∞‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏™‡∏∏‡∏Ç", "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£", "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", "‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠",
    "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå", "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏à‡∏±‡∏¢", "‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πâ‡∏≠‡∏£‡∏±‡∏á", "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ô‡∏≥‡πÇ‡∏î‡∏¢‡πÅ‡∏°‡∏•‡∏á‡∏ó‡∏µ‡πà 9.1 ‡∏à.‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥",
    "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ô‡∏≥‡πÇ‡∏î‡∏¢‡πÅ‡∏°‡∏•‡∏á‡∏ó‡∏µ‡πà 9.2 ‡∏à.‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå", "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ô‡∏≥‡πÇ‡∏î‡∏¢‡πÅ‡∏°‡∏•‡∏á‡∏ó‡∏µ‡πà 9.3 ‡∏à.‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå",
    "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ô‡∏≥‡πÇ‡∏î‡∏¢‡πÅ‡∏°‡∏•‡∏á‡∏ó‡∏µ‡πà 9.4 ‡∏õ‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á", "‡∏î‡πà‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≠‡∏° ‡∏à.‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå", "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏ä‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô",
    "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á", "‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°"
])
leave_types = ["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"]

menu = st.sidebar.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π", ["‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", "üìä Dashboard", "üìÖ ‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô", "üß≠ ‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£", "üïí ‡∏Å‡∏≤‡∏£‡∏•‡∏≤", "üßë‚Äçüíº ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö"])

if menu == "‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å":
    st.info("üí° ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤ ‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£ ‡∏™‡∏Ñ‡∏£.9\n\n"
            "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    st.image("https://ddc.moph.go.th/uploads/files/11120210817094038.jpg", caption="‡∏™‡∏Ñ‡∏£.9 ‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤")

elif menu == "üìä Dashboard":
    st.header("üìä Dashboard ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å")
    # (‡πÇ‡∏Ñ‡πâ‡∏î Dashboard)

elif menu == "üìÖ ‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô":
    st.header("üìÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
    # (‡πÇ‡∏Ñ‡πâ‡∏î‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô)

elif menu == "üß≠ ‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£":
    st.header("üß≠ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏π‡πà‡∏Ñ‡∏ì‡∏∞)")
    with st.form("form_travel_group"):
        common_data_ui = {
            "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô": st.selectbox("‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô", staff_groups, disabled=st.session_state.submitted),
            "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°": st.text_input("‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°/‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", disabled=st.session_state.submitted),
            "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà": st.text_input("‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà", disabled=st.session_state.submitted),
            "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°": st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°", dt.date.today(), key="travel_start_date", disabled=st.session_state.submitted),
            "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î": st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", dt.date.today(), key="travel_end_date", disabled=st.session_state.submitted)
        }
        
        days = count_weekdays(st.session_state.travel_start_date, st.session_state.travel_end_date)
        if days > 0:
            st.caption(f"üóìÔ∏è ‡∏£‡∏ß‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ {days} ‡∏ß‡∏±‡∏ô")
        
        selected_names = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô)", options=all_names, disabled=st.session_state.submitted)
        new_names_str = st.text_area("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà (‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)", placeholder="‡πÉ‡∏™‡πà 1 ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡πà‡∏≠ 1 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î", disabled=st.session_state.submitted)
        
        uploaded_file = st.file_uploader("‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á/‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (PDF)", type="pdf", disabled=st.session_state.submitted)
        
        submitted_travel = st.form_submit_button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", on_click=callback_submit, disabled=st.session_state.submitted)

    if submitted_travel:
        new_names = [name.strip() for name in new_names_str.split('\n') if name.strip()]
        final_names = list(set(selected_names + new_names))
        if not final_names:
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏Å '‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•' ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ñ‡∏ô")
            st.session_state.submitted = False
        elif common_data_ui["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°"] > common_data_ui["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î"]:
            st.error("'‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°' ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î'")
            st.session_state.submitted = False
        else:
            with st.spinner('‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå... ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà'):
                attachment_folder_id = get_or_create_folder(ATTACHMENT_FOLDER_NAME, FOLDER_ID)
                file_link = "-"
                if uploaded_file:
                    date_str = common_data_ui["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°"].strftime("%Y-%m-%d")
                    activity_str = common_data_ui["‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°"].replace(" ", "_")
                    first_name_str = final_names[0].replace(" ", "_")
                    pdf_filename = f"{date_str}_{activity_str}_{first_name_str}.pdf"
                    
                    file_link = upload_pdf_to_drive(uploaded_file, pdf_filename, attachment_folder_id)

                backup_excel(FILE_TRAVEL, df_travel)
                new_records = []
                timestamp = dt.datetime.now().strftime("%Y-%m-%d %H:%M")
                num_days = count_weekdays(common_data_ui["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°"], common_data_ui["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î"])
                
                for name in final_names:
                    fellow_travelers = ", ".join([other for other in final_names if other != name])
                    record = {
                        **common_data_ui, 
                        "‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•": name, 
                        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô": num_days, 
                        "‡∏ú‡∏π‡πâ‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á": fellow_travelers if fellow_travelers else "-", 
                        "‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£": file_link,
                        "last_update": timestamp
                    }
                    new_records.append(record)
                    
                if new_records:
                    df_travel_new = pd.concat([df_travel, pd.DataFrame(new_records)], ignore_index=True)
                    write_excel_to_drive(FILE_TRAVEL, df_travel_new)
                    st.success(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                    st.session_state.submitted = False
                    st.rerun()

    st.markdown("---")
    st.markdown("### üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•")
    search_name_travel = st.text_input("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£)", "")
    if search_name_travel:
        df_filtered_travel = df_travel[df_travel['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'].str.contains(search_name_travel, case=False, na=False)]
        st.dataframe(df_filtered_travel.astype(str), column_config={
                         "‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£": st.column_config.LinkColumn("‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö", display_text="üîó ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå")
                     })
    else:
        st.markdown("### üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        st.dataframe(df_travel.astype(str).sort_values('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°', ascending=False), 
                     column_config={
                         "‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£": st.column_config.LinkColumn("‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö", display_text="üîó ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå")
                     })

elif menu == "üïí ‡∏Å‡∏≤‡∏£‡∏•‡∏≤":
    st.header("üïí ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤")

    with st.form("form_leave"):
        col1, col2 = st.columns(2)
        with col1:
            name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", disabled=st.session_state.submitted, help="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏ï‡πá‡∏°")
            start_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏≤", dt.date.today(), key="leave_start_date", disabled=st.session_state.submitted)
        with col2:
            group = st.selectbox("‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô", staff_groups, disabled=st.session_state.submitted)
            end_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏≤", dt.date.today(), key="leave_end_date", disabled=st.session_state.submitted)
        
        leave_type = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤", leave_types, disabled=st.session_state.submitted)
        days = count_weekdays(st.session_state.leave_start_date, st.session_state.leave_end_date)
        if days > 0:
            st.caption(f"üóìÔ∏è ‡∏£‡∏ß‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ {days} ‡∏ß‡∏±‡∏ô")
        submitted_leave = st.form_submit_button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", on_click=callback_submit, disabled=st.session_state.submitted)

    if submitted_leave:
        data = {"‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•": name, "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô": group, "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤": leave_type, "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°": start_date, "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î": end_date}
        if not data["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"]:
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å '‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'")
            st.session_state.submitted = False
        elif data["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°"] > data["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î"]:
            st.error("'‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°' ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î'")
            st.session_state.submitted = False
        else:
            with st.spinner('‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...'):
                backup_excel(FILE_LEAVE, df_leave)
                data["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏•‡∏≤"] = count_weekdays(data["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°"], data["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î"])
                data["last_update"] = dt.datetime.now().strftime("%Y-%m-%d %H:%M")
                df_leave_new = pd.concat([df_leave, pd.DataFrame([data])], ignore_index=True)
                write_excel_to_drive(FILE_LEAVE, df_leave_new)
                st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
                st.session_state.submitted = False
                st.rerun()
                
    st.markdown("---")
    st.markdown("### üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•")
    search_name_leave = st.text_input("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏Å‡∏≤‡∏£‡∏•‡∏≤)", "")
    if search_name_leave:
        df_filtered_leave = df_leave[df_leave['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'].str.contains(search_name_leave, case=False, na=False)]
        st.dataframe(df_filtered_leave.astype(str))
    else:
        st.markdown("### üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        st.dataframe(df_leave.astype(str).sort_values('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°', ascending=False))

elif menu == "üßë‚Äçüíº ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö":
    st.header("üîê ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö")
    # (‡πÇ‡∏Ñ‡πâ‡∏î Admin Panel)
