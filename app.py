import io, re, altair as alt, datetime as dt, pandas as pd, numpy as np, streamlit as st
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload, MediaIoBaseUpload

# =======================
# üîê Auth & App Config
# =======================
st.set_page_config(page_title="‡∏™‡∏Ñ‡∏£.9 - ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏≤/‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£/‡∏™‡πÅ‡∏Å‡∏ô", layout="wide")
creds = service_account.Credentials.from_service_account_info(
    st.secrets["gcp_service_account"], scopes=["https://www.googleapis.com/auth/drive"]
)
ADMIN_PASSWORD = st.secrets.get("admin_password", "admin123")
FOLDER_ID = "1YFJZvs59ahRHmlRrKcQwepWJz6A-4B7d"
FILE_ATTEND = "attendance_report.xlsx"
FILE_LEAVE  = "leave_report.xlsx"
FILE_TRAVEL = "travel_report.xlsx"

service = build("drive", "v3", credentials=creds)

# =======================
# ‚ùó DataFrame Cleaners & Canonical Name Function
# =======================
def canonical_name(name: str) -> str:
    # Remove spaces, make lowercase, normalize for duplication detection
    return re.sub(r"\s+", "", str(name)).strip().lower()

def clean_df(df, schema):
    df_clean = df.copy()
    for col, t in schema.items():
        if col not in df_clean.columns:
            df_clean[col] = "" if t==str else np.nan
        if t == str:
            df_clean[col] = df_clean[col].astype(str).replace("nan", "").str.strip()
        elif t == dt.date:
            df_clean[col] = pd.to_datetime(df_clean[col], errors='coerce').dt.date
        elif t == int:
            df_clean[col] = pd.to_numeric(df_clean[col], errors='coerce').fillna(0).astype(int)
    df_clean = df_clean.fillna("")
    return df_clean

# =======================
# üóÇÔ∏è Drive Helpers (Handle Exception + Backup)
# =======================
def try_api_call(func, *args, **kwargs):
    try:
        return func(*args, **kwargs)
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î Google API: {e}")
        return None

def get_file_id(filename: str, parent_id=FOLDER_ID):
    q = f"name='{filename}' and '{parent_id}' in parents and trashed=false"
    res = try_api_call(service.files().list, q=q, fields="files(id,name)", supportsAllDrives=True, includeItemsFromAllDrives=True)
    files = res.get("files", []) if res else []
    return files[0]["id"] if files else None

def read_excel_from_drive(filename: str) -> pd.DataFrame:
    file_id = get_file_id(filename)
    if not file_id: return pd.DataFrame()
    req = try_api_call(service.files().get_media, fileId=file_id, supportsAllDrives=True)
    if not req: return pd.DataFrame()
    fh = io.BytesIO()
    downloader = MediaIoBaseDownload(fh, req)
    done = False
    while not done:
        try:
            _, done = downloader.next_chunk()
        except Exception as e:
            st.error(f"error reading chunk: {e}")
            return pd.DataFrame()
    fh.seek(0)
    try:
        return pd.read_excel(fh, engine="openpyxl")
    except Exception:
        fh.seek(0)
        return pd.read_excel(fh)

def write_excel_to_drive(filename: str, df: pd.DataFrame):
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
        df.to_excel(writer, index=False)
    output.seek(0)
    media = MediaIoBaseUpload(output, mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
    file_id = get_file_id(filename)
    try:
        if file_id:
            service.files().update(fileId=file_id, media_body=media, supportsAllDrives=True).execute()
        else:
            service.files().create(body={"name": filename, "parents": [FOLDER_ID]}, media_body=media, fields="id", supportsAllDrives=True).execute()
    except Exception as e:
        st.error(f"Drive upload failed: {e}")

def backup_excel(original_filename: str, df: pd.DataFrame):
    if df.empty: return
    now = dt.datetime.now().strftime("%Y-%m-%d_%H%M%S")
    backup_filename = f"backup_{now}_{original_filename}"
    write_excel_to_drive(backup_filename, df)
    st.info(f"‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß: {backup_filename}")

# ============= Safe Filename Utility =============
def safe_filename(text):
    # Remove Thai/English unsafe chars for filename
    s = re.sub(r"[^\w]", "_", str(text))
    return re.sub(r"_+", "_", s).strip("_")

# =======================
# üì• Loading & Cleaning Data
# =======================
df_schema_att = {"‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•":str, "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà":dt.date, "‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤":str, "‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å":str, "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏":str}
df_schema_leave = {"‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•":str, "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô":str, "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤":str, "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°":dt.date, "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î":dt.date, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏•‡∏≤":int, "last_update":str}
df_schema_travel = {"‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•":str, "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô":str, "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°":str, "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà":str, "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°":dt.date, "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î":dt.date, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô":int, "‡∏ú‡∏π‡πâ‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á":str, "‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£":str, "last_update":str}

df_att = clean_df(read_excel_from_drive(FILE_ATTEND), df_schema_att)
df_leave = clean_df(read_excel_from_drive(FILE_LEAVE), df_schema_leave)
df_travel = clean_df(read_excel_from_drive(FILE_TRAVEL), df_schema_travel)

# =======================
# üéØ Canonical All-Staff List
# =======================
all_names_raw = pd.concat([
    df_leave["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"], df_travel["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"], df_att["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"]
])
all_names_canon = {}
for name in all_names_raw.dropna().unique():
    canon = canonical_name(name)
    if canon and canon not in all_names_canon:
        all_names_canon[canon] = name
all_names = sorted(all_names_canon.values())

staff_groups = sorted([ "‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠", "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏≤‡∏î‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡πÇ‡∏ï‡πâ‡∏†‡∏≤‡∏ß‡∏∞‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏™‡∏∏‡∏Ç", "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£", "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", "‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠", "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå", "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏à‡∏±‡∏¢", "‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πâ‡∏≠‡∏£‡∏±‡∏á", "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ô‡∏≥‡πÇ‡∏î‡∏¢‡πÅ‡∏°‡∏•‡∏á‡∏ó‡∏µ‡πà 9.1 ‡∏à.‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥", "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ô‡∏≥‡πÇ‡∏î‡∏¢‡πÅ‡∏°‡∏•‡∏á‡∏ó‡∏µ‡πà 9.2 ‡∏à.‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå", "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ô‡∏≥‡πÇ‡∏î‡∏¢‡πÅ‡∏°‡∏•‡∏á‡∏ó‡∏µ‡πà 9.3 ‡∏à.‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå", "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ô‡∏≥‡πÇ‡∏î‡∏¢‡πÅ‡∏°‡∏•‡∏á‡∏ó‡∏µ‡πà 9.4 ‡∏õ‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á", "‡∏î‡πà‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≠‡∏° ‡∏à.‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå", "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏ä‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô", "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á", "‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°" ])
leave_types = ["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"]

# =======================
#  Session State Per Form (Not Global)
# =======================
for key in ["submitted_travel","submitted_leave","submitted_attend"]:
    if key not in st.session_state: st.session_state[key]=False

# =======================
# üß≠ ‡∏™‡πà‡∏ß‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ (‡πÅ‡∏Å‡πâ Input/Validate/Backup/Name)
# =======================
st.header("üß≠ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ (‡∏´‡∏°‡∏π‡πà‡∏Ñ‡∏ì‡∏∞)")
with st.form("travel_form"):
    group = st.selectbox("‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô", staff_groups, key="travel_group", disabled=st.session_state.submitted_travel)
    activity = st.text_input("‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°/‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", key="travel_activity", disabled=st.session_state.submitted_travel)
    location = st.text_input("‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà", key="travel_location", disabled=st.session_state.submitted_travel)
    start_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°", dt.date.today(), key="travel_start", disabled=st.session_state.submitted_travel)
    end_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", dt.date.today(), key="travel_end", disabled=st.session_state.submitted_travel)
    selected_names = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà", all_names, key="travel_names", disabled=st.session_state.submitted_travel)
    new_names_str = st.text_area("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà (1 ‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠ 1 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î)", key="travel_new_names", disabled=st.session_state.submitted_travel)
    submitted_travel = st.form_submit_button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", disabled=st.session_state.submitted_travel)

if submitted_travel:
    # Validate: field must not be blank, no duplication, date range valid
    new_names = [x.strip() for x in new_names_str.split("\n") if x.strip()]
    # Use canonical name to check duplication
    all_submit_names = {} # canonical => display name
    for name in selected_names + new_names:
        canon = canonical_name(name)
        if not canon: continue
        if canon not in all_submit_names: all_submit_names[canon]=name
    final_names = list(all_submit_names.values())
    if not final_names:
        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ñ‡∏ô")
        st.session_state.submitted_travel=False
    elif start_date > end_date:
        st.error("'‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°' ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î'")
        st.session_state.submitted_travel=False
    elif not group or not activity or not location:
        st.error("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• '‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô', '‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà' ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á")
        st.session_state.submitted_travel=False
    else:
        try:
            backup_excel(FILE_TRAVEL, df_travel) # backup ‡∏Å‡πà‡∏≠‡∏ô
            fellow_str = lambda this, lst: ", ".join([n for n in lst if n != this]) if len(lst)>1 else "-"
            num_days = (end_date-start_date).days + 1
            timestamp = dt.datetime.now().strftime("%Y-%m-%d %H:%M")
            new_records=[]
            for name in final_names:
                new_records.append({
                    "‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•": name,
                    "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô": group,
                    "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°": activity,
                    "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà": location,
                    "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°": start_date,
                    "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î": end_date,
                    "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô": num_days,
                    "‡∏ú‡∏π‡πâ‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á": fellow_str(name, final_names),
                    "‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£": "-",
                    "last_update": timestamp
                })
            df_travel_new = pd.concat([df_travel, pd.DataFrame(new_records)], ignore_index=True)
            write_excel_to_drive(FILE_TRAVEL, df_travel_new) # ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô
            backup_excel(FILE_TRAVEL, df_travel_new) # backup ‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            st.success(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà {', '.join(final_names)}) ({num_days} ‡∏ß‡∏±‡∏ô)")
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        st.session_state.submitted_travel=False
        st.rerun()

st.dataframe(df_travel.astype(str).sort_values('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°', ascending=False), use_container_width=True)

# ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡πÅ‡∏Å‡∏ô ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ logic ‡πÅ‡∏•‡∏∞ structure ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ô‡∏µ‡πâ (validate, backup, session state per form, canonical name, cleaning ‡∏Å‡πà‡∏≠‡∏ô editor/save)
