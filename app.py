# ====================================================
# üìã ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ (‡∏™‡∏Ñ‡∏£.9)
# ‚úÖ Final Version: Smart Cache, Refresh, Backup, Drive Access Fix
# ====================================================

import io
import os
import shutil
import datetime as dt
import altair as alt
import pandas as pd
import numpy as np
import streamlit as st
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload, MediaIoBaseUpload

# ===========================
# üîê Auth & App Config
# ===========================
st.set_page_config(page_title="‡∏™‡∏Ñ‡∏£.9 - ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏≤/‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£/‡∏™‡πÅ‡∏Å‡∏ô", layout="wide")

# ‚úÖ ‡πÉ‡∏ä‡πâ scope ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß)
creds = service_account.Credentials.from_service_account_info(
    st.secrets["gcp_service_account"],
    scopes=["https://www.googleapis.com/auth/drive"]
)
ADMIN_PASSWORD = st.secrets.get("admin_password", "admin123")

# ===========================
# üóÇÔ∏è Shared Drive Config
# ===========================
FOLDER_ID = "1YFJZvs59ahRHmlRrKcQwepWJz6A-4B7d"
FILE_ATTEND = "attendance_report.xlsx"
FILE_LEAVE  = "leave_report.xlsx"
FILE_TRAVEL = "travel_report.xlsx"

service = build("drive", "v3", credentials=creds)

# ===========================
# üîß Drive Helper Functions
# ===========================
def get_file_id(filename: str):
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ID ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô Shared Drive"""
    q = f"name='{filename}' and '{FOLDER_ID}' in parents and trashed=false"
    res = service.files().list(
        q=q,
        fields="files(id,name)",
        supportsAllDrives=True,
        includeItemsFromAllDrives=True
    ).execute()
    files = res.get("files", [])
    return files[0]["id"] if files else None


@st.cache_data(ttl=600)
def read_excel_from_drive(filename: str) -> pd.DataFrame:
    """‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡∏à‡∏≤‡∏Å Shared Drive"""
    try:
        file_id = get_file_id(filename)
        if not file_id:
            st.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {filename} ‡πÉ‡∏ô Shared Drive")
            return pd.DataFrame()

        req = service.files().get_media(fileId=file_id, supportsAllDrives=True)
        fh = io.BytesIO()
        downloader = MediaIoBaseDownload(fh, req)
        done = False
        while not done:
            _, done = downloader.next_chunk()
        fh.seek(0)
        st.sidebar.success(f"üìÑ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå {filename} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏≤‡∏Å Drive")
        return pd.read_excel(fh, engine="openpyxl")
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå {filename}: {e}")
        return pd.DataFrame()


def write_excel_to_drive(filename: str, df: pd.DataFrame):
    """‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡∏∂‡πâ‡∏ô Shared Drive"""
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
        df.to_excel(writer, index=False)
    output.seek(0)
    media = MediaIoBaseUpload(
        output,
        mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
    file_id = get_file_id(filename)
    if file_id:
        service.files().update(fileId=file_id, media_body=media, supportsAllDrives=True).execute()
    else:
        service.files().create(
            body={"name": filename, "parents": [FOLDER_ID]},
            media_body=media,
            fields="id",
            supportsAllDrives=True
        ).execute()


def backup_excel(original_filename: str, df: pd.DataFrame):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤"""
    if df.empty:
        return
    now = dt.datetime.now().strftime("%Y-%m-%d_%H%M%S")
    backup_filename = f"backup_{now}_{original_filename}"
    st.sidebar.info(f"‚öôÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {backup_filename}")
    write_excel_to_drive(backup_filename, df)

# ====================================================
# ‚öôÔ∏è Smart Cache + ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä + ‡πÄ‡∏ß‡∏•‡∏≤ Sync
# ====================================================

LOCAL_CACHE_DIR = "cached_files"
os.makedirs(LOCAL_CACHE_DIR, exist_ok=True)

# üîÅ ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Drive
st.sidebar.markdown("---")
if st.sidebar.button("üîÅ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Drive (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)"):
    try:
        shutil.rmtree(LOCAL_CACHE_DIR)
        os.makedirs(LOCAL_CACHE_DIR, exist_ok=True)
        st.sidebar.success("‚úÖ ‡∏•‡πâ‡∏≤‡∏á cache ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà...")
        st.experimental_rerun()
    except Exception as e:
        st.sidebar.error(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πâ‡∏≤‡∏á cache ‡πÑ‡∏î‡πâ: {e}")


def update_sync_time():
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏ã‡∏¥‡∏á‡∏Å‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
    sync_path = os.path.join(LOCAL_CACHE_DIR, "last_sync.txt")
    with open(sync_path, "w", encoding="utf-8") as f:
        f.write(dt.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))


def get_sync_time():
    """‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ã‡∏¥‡∏á‡∏Å‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
    sync_path = os.path.join(LOCAL_CACHE_DIR, "last_sync.txt")
    if os.path.exists(sync_path):
        with open(sync_path, "r", encoding="utf-8") as f:
            return f.read().strip()
    return "‚Äî ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ã‡∏¥‡∏á‡∏Å‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Äî"


def load_excel_smart_cache(filename, from_drive=True):
    """
    ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞:
    1Ô∏è‚É£ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÉ‡∏ô cache ‚Üí ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    2Ô∏è‚É£ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‚Üí ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Drive
    3Ô∏è‚É£ ‡∏ñ‡πâ‡∏≤‡∏î‡∏∂‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí ‡πÄ‡∏Å‡πá‡∏ö cache ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ã‡∏¥‡∏á‡∏Å‡πå
    """
    local_path = os.path.join(LOCAL_CACHE_DIR, filename)

    if os.path.exists(local_path):
        st.success(f"üìÑ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå {filename} ‡∏à‡∏≤‡∏Å cache local ‚úÖ")
        return pd.read_excel(local_path)

    elif from_drive:
        st.info(f"üîÑ ‡πÑ‡∏°‡πà‡∏û‡∏ö {filename} ‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‚Äî ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Shared Drive...")
        df = read_excel_from_drive(filename)
        if df.empty:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {filename} ‡πÉ‡∏ô Shared Drive")
            return pd.DataFrame()

        try:
            df.to_excel(local_path, index=False)
            update_sync_time()
            st.success(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå {filename} ‡∏à‡∏≤‡∏Å Drive ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å cache ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except Exception as e:
            st.warning(f"‚ö†Ô∏è ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏ï‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å cache ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        return df

    else:
        st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {filename} ‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô local ‡πÅ‡∏•‡∏∞ Shared Drive")
        return pd.DataFrame()


# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≤‡∏°‡∏ä‡∏∏‡∏î
df_att = load_excel_smart_cache(FILE_ATTEND)
df_leave = load_excel_smart_cache(FILE_LEAVE)
df_travel = load_excel_smart_cache(FILE_TRAVEL)

# üïí ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ã‡∏¥‡∏á‡∏Å‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô Sidebar
st.sidebar.caption(f"üïí ‡∏ã‡∏¥‡∏á‡∏Å‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {get_sync_time()}")

# ====================================================
# üéØ ‡∏™‡πà‡∏ß‡∏ô UI ‡∏´‡∏•‡∏±‡∏Å (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
# ====================================================
st.markdown("##### **‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà 9 ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤**")
st.title("üìã ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏≤ ‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô")

if 'submitted' not in st.session_state:
    st.session_state.submitted = False

def callback_submit():
    st.session_state.submitted = True

menu = st.sidebar.radio(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π",
    ["‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", "üìä Dashboard", "üìÖ ‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô", "üß≠ ‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£", "üïí ‡∏Å‡∏≤‡∏£‡∏•‡∏≤", "üßë‚Äçüíº ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö"]
)

if menu == "‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å":
    st.info("üí° ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤ ‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£ ‡∏™‡∏Ñ‡∏£.9\n\n"
            "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    st.image("https://ddc.moph.go.th/uploads/files/11120210817094038.jpg",
             caption="‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà 9 ‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤")

# ‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô (Dashboard, ‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô, ‡∏Å‡∏≤‡∏£‡∏•‡∏≤, ‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£, ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö)
# ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
