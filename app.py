# ====================================================
# üìã ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ (‡∏™‡∏Ñ‡∏£.9)
# ‚úÖ Final Version: Definitive Fix for All Errors
# ====================================================

import io
import mimetypes
import altair as alt
import datetime as dt
import pandas as pd
import numpy as np
import streamlit as st

from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload, MediaIoBaseUpload

# ===========================
# üîê Auth & App Config
# ===========================
st.set_page_config(page_title="‡∏™‡∏Ñ‡∏£.9 - ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏≤/‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£/‡∏™‡πÅ‡∏Å‡∏ô", layout="wide")

creds = service_account.Credentials.from_service_account_info(
    st.secrets["gcp_service_account"],
    scopes=["https://www.googleapis.com/auth/drive"]
)
ADMIN_PASSWORD = st.secrets.get("admin_password", "admin123")

# ===========================
# üóÇÔ∏è Shared Drive Config
# ===========================
FOLDER_ID = "1YFJZvs59ahRHmlRrKcQwepWJz6A-4B7d"
BACKUP_FOLDER = "Backups"
FILE_ATTEND = "scan_report.xlsx"
FILE_LEAVE  = "leave_report.xlsx"
FILE_TRAVEL = "travel_report.xlsx"

service = build("drive", "v3", credentials=creds)

# ===========================
# ‚öôÔ∏è Helper Functions
# ===========================
def get_file_id(filename: str, parent_id=FOLDER_ID):
    q = f"name='{filename}' and '{parent_id}' in parents and trashed=false"
    res = service.files().list(
        q=q, fields="files(id,name)", supportsAllDrives=True, includeItemsFromAllDrives=True
    ).execute()
    files = res.get("files", [])
    return files[0]["id"] if files else None

def get_or_create_folder(folder_name, parent_folder_id):
    q = f"name='{folder_name}' and '{parent_folder_id}' in parents and trashed=false"
    res = service.files().list(
        q=q, fields="files(id)", supportsAllDrives=True, includeItemsFromAllDrives=True
    ).execute()
    if res.get("files"):
        return res["files"][0]["id"]
    folder_metadata = {
        "name": folder_name,
        "mimeType": "application/vnd.google-apps.folder",
        "parents": [parent_folder_id]
    }
    folder = service.files().create(body=folder_metadata, fields="id", supportsAllDrives=True).execute()
    return folder.get("id")

@st.cache_data(ttl=600)
def read_excel_from_drive(filename: str) -> pd.DataFrame:
    """‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡∏à‡∏≤‡∏Å Shared Drive"""
    try:
        file_id = get_file_id(filename)
        if not file_id:
            st.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {filename}")
            return pd.DataFrame()
        req = service.files().get_media(fileId=file_id, supportsAllDrives=True)
        fh = io.BytesIO()
        downloader = MediaIoBaseDownload(fh, req)
        done = False
        while not done:
            _, done = downloader.next_chunk()
        fh.seek(0)
        return pd.read_excel(fh, engine="openpyxl")
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå {filename}: {e}")
        return pd.DataFrame()

def write_excel_to_drive(filename: str, df: pd.DataFrame):
    """‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Shared Drive"""
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
        df.to_excel(writer, index=False)
    output.seek(0)
    media = MediaIoBaseUpload(output, mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
    file_id = get_file_id(filename)
    if file_id:
        service.files().update(fileId=file_id, media_body=media, supportsAllDrives=True).execute()
    else:
        service.files().create(
            body={"name": filename, "parents": [FOLDER_ID]},
            media_body=media, fields="id", supportsAllDrives=True
        ).execute()

def backup_excel(original_filename: str, df: pd.DataFrame):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö"""
    if df.empty:
        return
    now = dt.datetime.now().strftime("%Y-%m-%d_%H%M%S")
    backup_folder_id = get_or_create_folder(BACKUP_FOLDER, FOLDER_ID)
    backup_filename = f"backup_{now}_{original_filename}"
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
        df.to_excel(writer, index=False)
    output.seek(0)
    media = MediaIoBaseUpload(output, mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
    service.files().create(
        body={"name": backup_filename, "parents": [backup_folder_id]},
        media_body=media, fields="id", supportsAllDrives=True
    ).execute()

# ===========================
# üì• Load All Data
# ===========================
df_att = read_excel_from_drive(FILE_ATTEND)
df_leave = read_excel_from_drive(FILE_LEAVE)
df_travel = read_excel_from_drive(FILE_TRAVEL)

def safe_get_names(df, cols):
    for col in cols:
        if col in df.columns:
            return set(df[col].dropna().astype(str))
    return set()

all_names = sorted(set().union(
    safe_get_names(df_att, ["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", "‡∏ä‡∏∑‡πà‡∏≠"]),
    safe_get_names(df_leave, ["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", "‡∏ä‡∏∑‡πà‡∏≠"]),
    safe_get_names(df_travel, ["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", "‡∏ä‡∏∑‡πà‡∏≠"])
))

# ===========================
# üß≠ ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
# ===========================
menu = st.sidebar.radio(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π",
    ["üìÖ ‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô", "üìä Dashboard", "üß≠ ‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£", "üïí ‡∏Å‡∏≤‡∏£‡∏•‡∏≤", "üßë‚Äçüíº ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö"]
)

# ===========================
# üìÖ ‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô
# ===========================
if menu == "üìÖ ‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô":
    st.header("üìÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô/‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
    if df_att.empty:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå scan_report.xlsx")
        st.stop()

    df_att["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = pd.to_datetime(df_att["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"], errors="coerce")
    df_att["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"] = df_att["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].dt.strftime("%Y-%m")

    months = sorted(df_att["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"].dropna().unique())
    selected_month = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", months, index=len(months)-1 if months else 0)
    selected_names = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£ (‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)", all_names)

    df_month = df_att[df_att["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"] == selected_month]

    records = []
    for name in (selected_names or all_names):
        for d in pd.date_range(selected_month + "-01", periods=31, freq="D"):
            if d.month != pd.to_datetime(selected_month).month:
                break
            rec = {"‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô": name, "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": d.date(), "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": ""}
            att = df_month[(df_month["‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"] == name) & (df_month["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].dt.date == d.date())]
            leave = df_leave[(df_leave["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"] == name) & (df_leave["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°"] <= d) & (df_leave["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î"] >= d)]
            travel = df_travel[(df_travel["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"] == name) & (df_travel["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°"] <= d) & (df_travel["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î"] >= d)]

            if not leave.empty:
                rec["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = f"‡∏•‡∏≤ ({leave['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤'].iloc[0]})"
            elif not travel.empty:
                rec["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£"
            elif not att.empty:
                rec["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "‡∏°‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥"
            else:
                rec["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "‡∏Ç‡∏≤‡∏î‡∏á‡∏≤‡∏ô"
            records.append(rec)

    df_daily = pd.DataFrame(records)
    st.dataframe(df_daily, use_container_width=True)

    summary = df_daily.pivot_table(index="‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", columns="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", aggfunc="size", fill_value=0).reset_index()
    st.markdown("### üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
    st.dataframe(summary, use_container_width=True)

    output = io.BytesIO()
    with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
        df_daily.to_excel(writer, index=False, sheet_name="‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
        summary.to_excel(writer, index=False, sheet_name="‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
    output.seek(0)
    st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô (Excel)", output,
                       file_name=f"‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ_{selected_month}.xlsx",
                       mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

# ===========================
# üìä Dashboard
# ===========================
elif menu == "üìä Dashboard":
    st.header("üìä Dashboard ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    col1, col2, col3 = st.columns(3)
    col1.metric("‡∏Å‡∏≤‡∏£‡∏•‡∏≤ (‡∏Ñ‡∏£‡∏±‡πâ‡∏á)", len(df_leave))
    col2.metric("‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ (‡∏Ñ‡∏£‡∏±‡πâ‡∏á)", len(df_travel))
    col3.metric("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÅ‡∏Å‡∏ô (‡πÅ‡∏ñ‡∏ß)", len(df_att))

# ===========================
# üßë‚Äçüíº ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö
# ===========================
elif menu == "üßë‚Äçüíº ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö":
    st.header("üîê ‡πÇ‡∏´‡∏°‡∏î‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö")

    if "admin_logged_in" not in st.session_state:
        st.session_state.admin_logged_in = False

    if not st.session_state.admin_logged_in:
        pwd = st.text_input("‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password")
        if st.button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"):
            if pwd == ADMIN_PASSWORD:
                st.session_state.admin_logged_in = True
                st.rerun()
            else:
                st.error("‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        st.stop()

    st.success("‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    if st.button("üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö"):
        st.session_state.admin_logged_in = False
        st.rerun()

    tab1, tab2, tab3 = st.tabs(["üìó ‡∏Å‡∏≤‡∏£‡∏•‡∏≤", "üìò ‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£", "üü© ‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å"])

    with tab1:
        st.caption("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
        edited_leave = st.data_editor(df_leave.astype(str), num_rows="dynamic", use_container_width=True)
        if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤"):
            backup_excel(FILE_LEAVE, df_leave)
            write_excel_to_drive(FILE_LEAVE, edited_leave)
            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

    with tab2:
        st.caption("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
        edited_travel = st.data_editor(df_travel.astype(str), num_rows="dynamic", use_container_width=True)
        if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£"):
            backup_excel(FILE_TRAVEL, df_travel)
            write_excel_to_drive(FILE_TRAVEL, edited_travel)
            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

    with tab3:
        st.caption("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÅ‡∏Å‡∏ô‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
        edited_att = st.data_editor(df_att.astype(str), num_rows="dynamic", use_container_width=True)
        if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÅ‡∏Å‡∏ô"):
            backup_excel(FILE_ATTEND, df_att)
            write_excel_to_drive(FILE_ATTEND, edited_att)
            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
