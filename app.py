# ====================================================
# üìã ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ (‡∏™‡∏Ñ‡∏£.9)
# ‚úÖ Full Production Version: ‡πÅ‡∏Å‡πâ Dashboard + ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏Ñ‡∏£‡∏ö + ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Error
# ====================================================

import io
import altair as alt
import datetime as dt
import pandas as pd
import numpy as np
import streamlit as st
import re
import requests

from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload, MediaIoBaseUpload

# ===========================
# üîê Auth & App Config
# ===========================
st.set_page_config(page_title="‡∏™‡∏Ñ‡∏£.9 - ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏≤/‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£/‡∏™‡πÅ‡∏Å‡∏ô", layout="wide")

creds = service_account.Credentials.from_service_account_info(
    st.secrets["gcp_service_account"],
    scopes=["https://www.googleapis.com/auth/drive"]
)
ADMIN_PASSWORD = st.secrets.get("admin_password", "admin123")

# ===========================
# üóÇÔ∏è Shared Drive Config
# ===========================
FOLDER_ID = "1YFJZvs59ahRHmlRrKcQwepWJz6A-4B7d"
ATTACHMENT_FOLDER_NAME = "‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö_‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£"
FILE_ATTEND = "attendance_report.xlsx"
FILE_LEAVE  = "leave_report.xlsx"
FILE_TRAVEL = "travel_report.xlsx"

service = build("drive", "v3", credentials=creds)

# ===========================
# üîß Drive Helpers
# ===========================
@st.cache_data(ttl=600)
def read_excel_from_drive(filename: str) -> pd.DataFrame:
    """‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡∏à‡∏≤‡∏Å Shared Drive; ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå ‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ DataFrame ‡∏ß‡πà‡∏≤‡∏á"""
    try:
        file_id = get_file_id(filename)
        if not file_id:
            return pd.DataFrame()
        req = service.files().get_media(fileId=file_id, supportsAllDrives=True)
        fh = io.BytesIO()
        downloader = MediaIoBaseDownload(fh, req)
        done = False
        while not done:
            _, done = downloader.next_chunk()
        fh.seek(0)
        return pd.read_excel(fh, engine="openpyxl")
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå {filename}: {e}")
        return pd.DataFrame()

def get_file_id(filename: str, parent_id=FOLDER_ID):
    """‡∏´‡∏≤ ID ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô Parent ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
    q = f"name='{filename}' and '{parent_id}' in parents and trashed=false"
    res = service.files().list(q=q, fields="files(id,name)", supportsAllDrives=True, includeItemsFromAllDrives=True).execute()
    files = res.get("files", [])
    return files[0]["id"] if files else None

def write_excel_to_drive(filename: str, df: pd.DataFrame):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å DataFrame ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ö‡∏ô Shared Drive"""
    if df.empty:
        return
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
        df.to_excel(writer, index=False)
    output.seek(0)
    media = MediaIoBaseUpload(output, mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
    file_id = get_file_id(filename)
    if file_id:
        service.files().update(fileId=file_id, media_body=media, supportsAllDrives=True).execute()
    else:
        service.files().create(body={"name": filename, "parents": [FOLDER_ID]},
                               media_body=media, fields="id", supportsAllDrives=True).execute()

def backup_excel(original_filename: str, df: pd.DataFrame):
    """‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"""
    if df.empty:
        return
    now = dt.datetime.now().strftime("%Y-%m-%d_%H%M%S")
    backup_filename = f"backup_{now}_{original_filename}"
    write_excel_to_drive(backup_filename, df)

@st.cache_resource
def get_or_create_folder(folder_name, parent_folder_id):
    """‡∏´‡∏≤ ID ‡∏Ç‡∏≠‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà"""
    folder_id = get_file_id(folder_name, parent_id=parent_folder_id)
    if folder_id:
        return folder_id
    else:
        meta = {'name': folder_name, 'mimeType': 'application/vnd.google-apps.folder', 'parents': [parent_folder_id]}
        folder = service.files().create(body=meta, fields='id', supportsAllDrives=True).execute()
        return folder.get('id')

def upload_pdf_to_drive(file_object, filename, folder_id):
    """‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î PDF ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ ViewLink"""
    if file_object is None:
        return "-"
    file_object.seek(0)
    media = MediaIoBaseUpload(file_object, mimetype='application/pdf', resumable=True)
    meta = {'name': filename, 'parents': [folder_id]}
    file = service.files().create(body=meta, media_body=media, fields='id, webViewLink', supportsAllDrives=True).execute()
    permission = {'type': 'domain', 'role': 'reader', 'domain': 'ddc.mail.go.th'}
    service.permissions().create(fileId=file.get('id'), body=permission, supportsAllDrives=True).execute()
    return file.get('webViewLink')

def count_weekdays(start_date, end_date):
    """‡∏ô‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£"""
    if start_date and end_date and start_date <= end_date:
        return np.busday_count(start_date, end_date + dt.timedelta(days=1))
    return 0

# ===========================
# üì• Load Data
# ===========================
df_att = read_excel_from_drive(FILE_ATTEND)
df_leave = read_excel_from_drive(FILE_LEAVE)
df_travel = read_excel_from_drive(FILE_TRAVEL)

# ===========================
# üéØ UI Constants & Main App
# ===========================
st.title("üìã ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏≤ ‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô (‡∏™‡∏Ñ‡∏£.9)")
st.caption("‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà 9 ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤")

if 'submitted' not in st.session_state:
    st.session_state.submitted = False

def callback_submit():
    st.session_state.submitted = True

staff_groups = sorted([
    "‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠", "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏≤‡∏î‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡πÇ‡∏ï‡πâ‡∏†‡∏≤‡∏ß‡∏∞‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏™‡∏∏‡∏Ç", "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£",
    "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", "‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠", "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå", "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏à‡∏±‡∏¢",
    "‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πâ‡∏≠‡∏£‡∏±‡∏á", "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ô‡∏≥‡πÇ‡∏î‡∏¢‡πÅ‡∏°‡∏•‡∏á‡∏ó‡∏µ‡πà 9.1 ‡∏à.‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥", "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ô‡∏≥‡πÇ‡∏î‡∏¢‡πÅ‡∏°‡∏•‡∏á‡∏ó‡∏µ‡πà 9.2 ‡∏à.‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå",
    "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ô‡∏≥‡πÇ‡∏î‡∏¢‡πÅ‡∏°‡∏•‡∏á‡∏ó‡∏µ‡πà 9.3 ‡∏à.‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå", "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ô‡∏≥‡πÇ‡∏î‡∏¢‡πÅ‡∏°‡∏•‡∏á‡∏ó‡∏µ‡πà 9.4 ‡∏õ‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á",
    "‡∏î‡πà‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≠‡∏° ‡∏à.‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå", "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏ä‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô", "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á",
    "‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°"
])
leave_types = ["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"]

all_names = sorted(list(set(pd.concat([
    df_leave.get('‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•', pd.Series(dtype=str)),
    df_travel.get('‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•', pd.Series(dtype=str)),
    df_att.get('‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•', pd.Series(dtype=str))
]).dropna())))

menu = st.sidebar.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π", [
    "‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", "üìä Dashboard", "üìÖ ‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô", "üß≠ ‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£", "üïí ‡∏Å‡∏≤‡∏£‡∏•‡∏≤", "üßë‚Äçüíº ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö"
])

# ----------------------------
# üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
# ----------------------------
if menu == "‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å":
    st.info("üí° ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡πÉ‡∏ô ‡∏™‡∏Ñ‡∏£.9\n"
            "‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà ‡∏Å‡∏≤‡∏£‡∏•‡∏≤ ‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ PDF ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á")
    st.image("https://ddc.moph.go.th/uploads/files/11120210817094038.jpg",
             caption="‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà 9 ‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤", use_container_width=True)

# ----------------------------
# üìä Dashboard
# ----------------------------
elif menu == "üìä Dashboard":
    st.header("üìä Dashboard ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å")
    col1, col2, col3 = st.columns(3)
    col1.metric("‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ (‡∏Ñ‡∏£‡∏±‡πâ‡∏á)", len(df_travel))
    col2.metric("‡∏Å‡∏≤‡∏£‡∏•‡∏≤ (‡∏Ñ‡∏£‡∏±‡πâ‡∏á)", len(df_leave))
    col3.metric("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÅ‡∏Å‡∏ô (‡πÅ‡∏ñ‡∏ß)", len(df_att))
    st.markdown("---")

    c1, c2 = st.columns(2)
    with c1:
        st.subheader("üìÖ ‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô")
        if not df_leave.empty and "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô" in df_leave and "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏•‡∏≤" in df_leave:
            leave_by_group = df_leave.groupby("‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô")["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏•‡∏≤"].sum().reset_index().sort_values("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏•‡∏≤", ascending=False)
            chart = alt.Chart(leave_by_group).mark_bar(color="#4C9A2A").encode(
                x="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏•‡∏≤:Q", y=alt.Y("‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô:N", sort="-x"), tooltip=["‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏•‡∏≤"]
            )
            st.altair_chart(chart, use_container_width=True)
        else:
            st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠")

    with c2:
        st.subheader("üß≠ ‡∏ú‡∏π‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (Top 5)")
        if not df_travel.empty and "‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•" in df_travel:
            top5 = df_travel["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"].value_counts().nlargest(5).reset_index()
            top5.columns = ["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á"]
            chart = alt.Chart(top5).mark_bar(color="#E67E22").encode(
                x="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á:Q", y=alt.Y("‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•:N", sort="-x"), tooltip=["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á"]
            )
            st.altair_chart(chart, use_container_width=True)
        else:
            st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£")

    # ----------------------------
# üìÖ ‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏£‡∏¥‡∏á + ‡πÑ‡∏Ç‡∏ß‡πâ 3 ‡∏ê‡∏≤‡∏ô)
# ----------------------------
elif menu == "üìÖ ‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô":
    st.header("üìÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏≤‡∏Å‡∏™‡πÅ‡∏Å‡∏ô + ‡∏•‡∏≤ + ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£)")

    if df_att.empty:
        st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
        st.stop()

    # ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    rename_map = {"‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•": "‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", "‡∏ä‡∏∑‡πà‡∏≠": "‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"}
    for df in [df_att, df_leave, df_travel]:
        df.rename(columns=rename_map, inplace=True)

    if "‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô" not in df_att.columns:
        st.error("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏™‡πÅ‡∏Å‡∏ô")
        st.stop()

    # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    df_att["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = pd.to_datetime(df_att["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"], errors="coerce")
    for df in [df_leave, df_travel]:
        for c in ["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î"]:
            if c in df.columns:
                df[c] = pd.to_datetime(df[c], errors="coerce")

    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    df_att["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"] = df_att["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].dt.strftime("%Y-%m")
    months = sorted(df_att["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"].dropna().unique())
    if not months:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏™‡πÅ‡∏Å‡∏ô")
        st.stop()

    selected_month = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π", months, index=len(months)-1)
    selected_names = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£", sorted(df_att["‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"].unique()), max_selections=5)

    df_month = df_att[df_att["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"] == selected_month].copy()
    if selected_names:
        df_month = df_month[df_month["‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"].isin(selected_names)]

    if df_month.empty:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
        st.stop()

    # ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£
    WORK_START = dt.time(8, 30)
    WORK_END = dt.time(16, 30)

    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    y, m = map(int, selected_month.split("-"))
    month_start = dt.date(y, m, 1)
    month_end = (month_start + pd.offsets.MonthEnd(0)).date()
    date_range = pd.date_range(month_start, month_end, freq="D")

    # ‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô
    records = []
    for name in df_month["‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"].unique():
        for d in date_range:
            rec = {"‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô": name, "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": d.date(), "‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤": "", "‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å": "", "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏": "", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": ""}
            att = df_month[(df_month["‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"] == name) & (df_month["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].dt.date == d.date())]

            if not att.empty:
                rec["‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤"] = att.iloc[0].get("‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤", "")
                rec["‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å"] = att.iloc[0].get("‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å", "")
                rec["‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"] = att.iloc[0].get("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", "")

                # üßÆ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏™‡∏≤‡∏£‡πå‚Äì‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏Å‡πà‡∏≠‡∏ô
                if d.weekday() >= 5:
                    rec["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î"
                else:
                    try:
                        t_in = pd.to_datetime(str(rec["‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤"]), format="%H:%M").time() if rec["‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤"] else None
                        t_out = pd.to_datetime(str(rec["‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å"]), format="%H:%M").time() if rec["‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å"] else None
                    except Exception:
                        t_in, t_out = None, None

                    if not t_in and not t_out:
                        rec["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "‡∏Ç‡∏≤‡∏î‡∏á‡∏≤‡∏ô"
                    elif t_in and not t_out:
                        rec["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô"
                    elif not t_in and t_out:
                        rec["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "‡∏Ç‡∏≤‡∏î‡∏á‡∏≤‡∏ô"
                    else:
                        if t_in > WORK_START and t_out < WORK_END:
                            rec["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "‡∏°‡∏≤‡∏™‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô"
                        elif t_in > WORK_START:
                            rec["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "‡∏°‡∏≤‡∏™‡∏≤‡∏¢"
                        elif t_out < WORK_END:
                            rec["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô"
                        else:
                            rec["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "‡∏°‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥"
            else:
                # ‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡πÅ‡∏Å‡∏ô ‚Üí ‡∏ï‡∏£‡∏ß‡∏à‡∏•‡∏≤ / ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£
                in_leave = (
                    not df_leave.empty and
                    (df_leave["‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"] == name).any() and
                    (df_leave[
                        (df_leave["‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"] == name) &
                        (df_leave["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°"] <= d) &
                        (df_leave["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î"] >= d)
                    ].shape[0] > 0)
                )
                in_travel = (
                    not df_travel.empty and
                    (df_travel["‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"] == name).any() and
                    (df_travel[
                        (df_travel["‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"] == name) &
                        (df_travel["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°"] <= d) &
                        (df_travel["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î"] >= d)
                    ].shape[0] > 0)
                )

                if in_leave:
                    leave_type = df_leave.loc[
                        (df_leave["‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"] == name) &
                        (df_leave["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°"] <= d) &
                        (df_leave["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î"] >= d),
                        "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤"
                    ].iloc[0]
                    rec["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = f"‡∏•‡∏≤ ({leave_type})"
                elif in_travel:
                    rec["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£"
                elif d.weekday() >= 5:
                    rec["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î"
                else:
                    rec["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "‡∏Ç‡∏≤‡∏î‡∏á‡∏≤‡∏ô"

            records.append(rec)

    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    df_daily = pd.DataFrame(records).sort_values(["‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"])

    def color_status(val):
        colors = {
            "‡∏°‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥": "background-color:#d4edda",
            "‡∏°‡∏≤‡∏™‡∏≤‡∏¢": "background-color:#ffeeba",
            "‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô": "background-color:#f8d7da",
            "‡∏°‡∏≤‡∏™‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô": "background-color:#fcd5b5",
            "‡∏•‡∏≤": "background-color:#d1ecf1",
            "‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£": "background-color:#fff3cd",
            "‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î": "background-color:#e2e3e5",
            "‡∏Ç‡∏≤‡∏î‡∏á‡∏≤‡∏ô": "background-color:#f5c6cb",
        }
        for key in colors:
            if key in str(val):
                return colors[key]
        return ""

    st.markdown("### üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
    st.dataframe(df_daily.style.applymap(color_status, subset=["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"]), use_container_width=True, height=600)

    # üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
        df_daily.to_excel(writer, index=False, sheet_name="‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
    output.seek(0)
    st.download_button(
        "üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (Excel)",
        data=output,
        file_name=f"‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô_{selected_month}.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

    # üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    st.markdown("---")
    st.subheader("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô")

    df_daily["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏¢‡πà‡∏≠"] = df_daily["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"].apply(lambda x: "‡∏•‡∏≤" if str(x).startswith("‡∏•‡∏≤") else x)
    summary = (
        df_daily.groupby(["‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏¢‡πà‡∏≠"])
        .size()
        .reset_index(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô")
        .pivot(index="‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", columns="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏¢‡πà‡∏≠", values="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô")
        .fillna(0)
        .astype(int)
        .reset_index()
    )
    summary["‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] = summary.drop(columns=["‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"]).sum(axis=1)

    preferred = ["‡∏°‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥", "‡∏°‡∏≤‡∏™‡∏≤‡∏¢", "‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô", "‡∏°‡∏≤‡∏™‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô", "‡∏•‡∏≤", "‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£", "‡∏Ç‡∏≤‡∏î‡∏á‡∏≤‡∏ô", "‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î", "‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"]
    cols = [c for c in preferred if c in summary.columns]
    summary = summary[["‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"] + cols]

    st.dataframe(summary, use_container_width=True)


# ----------------------------
# üß≠ ‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£
# ----------------------------
elif menu == "üß≠ ‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£":
    st.header("üß≠ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ (‡∏´‡∏°‡∏π‡πà‡∏Ñ‡∏ì‡∏∞)")
    with st.form("form_travel_group"):
        data_ui = {
            "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô": st.selectbox("‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô", staff_groups),
            "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°": st.text_input("‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°/‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"),
            "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà": st.text_input("‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà"),
            "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°": st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°", dt.date.today()),
            "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î": st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", dt.date.today())
        }
        days = count_weekdays(data_ui["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°"], data_ui["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î"])
        if days > 0:
            st.caption(f"üóìÔ∏è ‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ {days} ‡∏ß‡∏±‡∏ô")

        selected = st.multiselect("‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á", options=all_names)
        new_names = st.text_area("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)", placeholder="‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î")
        upload = st.file_uploader("‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (PDF)", type="pdf")

        submitted = st.form_submit_button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

    if submitted:
        names = list(set(selected + [x.strip() for x in new_names.splitlines() if x.strip()]))
        if not names:
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ñ‡∏ô")
        elif data_ui["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°"] > data_ui["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î"]:
            st.error("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î")
        else:
            folder_id = get_or_create_folder(ATTACHMENT_FOLDER_NAME, FOLDER_ID)
            file_link = "-"
            if upload:
                safe_name = re.sub(r"[^\w‡∏Å-‡πô]", "_", data_ui["‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°"])
                filename = f"{data_ui['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°']}_{safe_name}_{names[0]}.pdf"
                file_link = upload_pdf_to_drive(upload, filename, folder_id)

            backup_excel(FILE_TRAVEL, df_travel)
            now = dt.datetime.now().strftime("%Y-%m-%d %H:%M")
            records = []
            for n in names:
                records.append({
                    **data_ui, "‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•": n,
                    "‡∏ú‡∏π‡πâ‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á": ", ".join([x for x in names if x != n]) or "-",
                    "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô": days,
                    "‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£": file_link,
                    "last_update": now
                })
            df_new = pd.concat([df_travel, pd.DataFrame(records)], ignore_index=True)
            write_excel_to_drive(FILE_TRAVEL, df_new)
            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
            st.rerun()

    st.markdown("### üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    if not df_travel.empty:
        st.dataframe(df_travel.astype(str).sort_values("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°", ascending=False),
                     column_config={"‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£": st.column_config.LinkColumn("‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö", display_text="üîó ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå")})
    else:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£")

# ----------------------------
# üïí ‡∏Å‡∏≤‡∏£‡∏•‡∏≤
# ----------------------------
elif menu == "üïí ‡∏Å‡∏≤‡∏£‡∏•‡∏≤":
    st.header("üïí ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤")
    with st.form("form_leave"):
        name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•")
        group = st.selectbox("‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô", staff_groups)
        leave_type = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤", leave_types)
        start = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°", dt.date.today())
        end = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", dt.date.today())
        days = count_weekdays(start, end)
        if days > 0:
            st.caption(f"üóìÔ∏è ‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ {days} ‡∏ß‡∏±‡∏ô")
        submit_leave = st.form_submit_button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

    if submit_leave:
        if not name:
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠")
        elif start > end:
            st.error("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î")
        else:
            backup_excel(FILE_LEAVE, df_leave)
            rec = {
                "‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•": name, "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô": group, "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤": leave_type,
                "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°": start, "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î": end,
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏•‡∏≤": days,
                "last_update": dt.datetime.now().strftime("%Y-%m-%d %H:%M")
            }
            df_new = pd.concat([df_leave, pd.DataFrame([rec])], ignore_index=True)
            write_excel_to_drive(FILE_LEAVE, df_new)
            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
            st.rerun()

    st.markdown("### üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    if not df_leave.empty:
        st.dataframe(df_leave.astype(str).sort_values("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°", ascending=False))
    else:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤")

# ----------------------------
# üßë‚Äçüíº ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö
# ----------------------------
elif menu == "üßë‚Äçüíº ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö":
    st.header("üîê ‡πÅ‡∏ú‡∏á‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö")
    pwd = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô Admin", type="password")
    if pwd == ADMIN_PASSWORD:
        st.success("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚úÖ")
        st.markdown("### üîß ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•")
        colA, colB = st.columns(2)
        with colA:
            if st.button("üì§ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
                with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î..."):
                    st.download_button("‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏≤", df_leave.to_csv(index=False), file_name="leave_report.csv")
                    st.download_button("‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£", df_travel.to_csv(index=False), file_name="travel_report.csv")
        with colB:
            if st.button("üßπ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå Cache ‡∏£‡∏∞‡∏ö‡∏ö"):
                st.cache_data.clear()
                st.cache_resource.clear()
                st.success("‡∏•‡πâ‡∏≤‡∏á Cache ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    elif pwd:
        st.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‚ùå")
    else:
        st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö")









